# -*- coding: utf-8 -*-
"""2019-PY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zbi8uq9dtDzS40b3T7lYnYhEHNQ7vUIS
"""

import pandas as pd
import numpy as np

from sklearn.feature_selection import mutual_info_classif

# Load the CIC DDoS 2019 dataset
cic_ddos_2019 = pd.read_csv('/content/COMBined_file.csv', low_memory=False)

# Display the column names
print(cic_ddos_2019.columns)

# Specify the label column correctly as it have initial spaces
label_column = ' Label'

# Step 2: Determine the total dimensions
dim_cic_ddos_2019 = cic_ddos_2019.shape
print(f'Total Dimensions: {dim_cic_ddos_2019}')

# Step 3: Count genuine and malicious samples
genuine_cic_ddos_2019 = cic_ddos_2019[cic_ddos_2019[label_column] == 'BENIGN'].shape[0]
malicious_cic_ddos_2019 = cic_ddos_2019.shape[0] - genuine_cic_ddos_2019

print(f'Genuine Samples: {genuine_cic_ddos_2019}')
print(f'Malicious Samples: {malicious_cic_ddos_2019}')

# Step 4: Calculate the percentage of TCP SYN Flood attacks
tcp_syn_flood_cic_ddos_2019 = cic_ddos_2019[cic_ddos_2019[label_column] == 'Syn'].shape[0]
percent_tcp_syn_flood_cic_ddos_2019 = (tcp_syn_flood_cic_ddos_2019 / malicious_cic_ddos_2019) * 100

print(f'TCP SYN Flood %: {percent_tcp_syn_flood_cic_ddos_2019:.2f}%')

# Step 5: Ensure all feature columns are numeric
features_cic_ddos_2019 = cic_ddos_2019.drop(columns=[label_column])

# Convert all non-numeric columns to NaN
features_cic_ddos_2019 = features_cic_ddos_2019.apply(pd.to_numeric, errors='coerce')

# Replace infinity values with NaN
features_cic_ddos_2019.replace([np.inf, -np.inf], np.nan, inplace=True)

# Fill NaN values with zeros
features_cic_ddos_2019 = features_cic_ddos_2019.fillna(0)

# Convert labels to strings to ensure consistency
labels_cic_ddos_2019 = cic_ddos_2019[label_column].astype(str)

# Compute information gain
info_gain_cic_ddos_2019 = mutual_info_classif(features_cic_ddos_2019, labels_cic_ddos_2019)

# Create DataFrame
info_gain_df_cic_ddos_2019 = pd.DataFrame({
    'Feature': features_cic_ddos_2019.columns,
    'Information Gain': info_gain_cic_ddos_2019
}).sort_values(by='Information Gain', ascending=False)

print("Top features by information gain for CIC DDoS 2019:")
print(info_gain_df_cic_ddos_2019.head())